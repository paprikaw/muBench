apiVersion: v1
data:
  {
    "Loader.py": "import random\nimport time\nimport os\nfrom concurrent.futures import ThreadPoolExecutor, wait\nimport jsonmerge\nimport string\n\nparams_processed = False\n\ndef cpu_loader_job(params):\n    cpu_load = random.randint(params[\"range_complexity\"][0], params[\"range_complexity\"][1])\n    trials = int(params[\"trials\"])\n\n    for x in range(trials):\n        pi_greco = list()\n        q, r, t, k, m, x = 1, 0, 1, 1, 3, 3\n        counter = 0\n        while True:\n            if 4 * q + r - t < m * t:\n                # yield m\n                pi_greco.append(str(m))\n                q, r, t, k, m, x = 10*q, 10*(r-m*t), t, k, (10*(3*q+r))//t - 10*m, x\n                if counter > cpu_load-1:\n                    break\n                else:\n                    counter = counter+1\n            else:\n                q, r, t, k, m, x = q*k, (2*q+r)*x, t*x, k+1, (q*(7*k+2)+r*x)//(t*x), x+2\n        #print(\"Service complexity: %d - Number of cycles for pi computation: %d\" % (cpu_load, cpu_load + 1))\n        # print(f\"Value: 3.{''.join(pi_greco[1:])}\\n\")\n\ndef cpu_loader(params):\n    # print(\"--------> CPU stress start\")\n    pool_size = int(params[\"thread_pool_size\"])\n    pool = ThreadPoolExecutor(pool_size)\n    futures = list()\n    for thread in range(pool_size):\n        futures.append(pool.submit(cpu_loader_job, params))\n    wait(futures)\n    # print(\"--------> CPU stress test stop\")\n    return\n\ndef bandwidth_loader(params):\n    # print(\"--------> Network stress start\")\n    bandwidth_load = params[\"mean_bandwidth\"]\n    start_local_processing = time.time()\n    num_chars = int(max(1, 1000 * bandwidth_load))  # Response in kB\n    response_body = ''.join('a' for i in range(num_chars))\n    print(time.time() - start_local_processing) \n    # print(\"--------> Network stress stop\")\n    return response_body\n\ndef memory_loader(params):\n    # print(\"--------> Memory stress start\")\n    memory_size = params[\"memory_size\"]\n    memory_io = params[\"memory_io\"]\n    \n    # allocate memory_size kB of memory\n    dummy_buffer = []\n    dummy_buffer = ['A' * 1000 for _ in range(0, int(memory_size))]\n    \n    for i in range(0, int(memory_io)):\n        v = dummy_buffer[i % int(memory_size)]  # read operation\n        dummy_buffer[i % int(memory_size)] = ['A' * 1000] # write operation\n    # print(\"--------> Memory stress stop\")\n    return dummy_buffer\n\ndef disk_loader(params):\n        # print(\"--------> Disk stress start\")\n        # print(\"--------> Write stress start\")\n        filename_base = params[\"tmp_file_name\"]\n        rnd_str = ''.join(random.choice(string.ascii_lowercase) for i in range(10))\n        filename = f\"{rnd_str}-{filename_base}\"\n        blocks_count = params[\"disk_write_block_count\"]\n        block_size = params[\"disk_write_block_size\"]\n        f = os.open(filename, os.O_CREAT | os.O_WRONLY, 0o777)  # low-level I/O\n        for i in range(blocks_count):\n            buff = os.urandom(block_size)\n            os.write(f, buff)\n        os.fsync(f)  # force write to disk\n        os.close(f)\n        # print(\"--------> Write stress stop\")\n\n        # print(\"--------> Read stress start\")\n        f = os.open(filename, os.O_RDONLY, 0o777)  # low-level I/O\n        # generate random read positions\n        offsets = list(range(0, blocks_count * block_size, block_size))\n        random.shuffle(offsets)\n\n        for i, offset in enumerate(offsets, 1):\n            os.lseek(f, offset, os.SEEK_SET)  # set position\n            buff = os.read(f, block_size)  # read from position\n            if not buff: break  # if EOF reached\n        os.close(f)\n        # print(\"--------> Read stress stop\")\n        os.remove(filename)\n        return\n\ndef sleep_loader(params):\n    # print(\"--------> Sleep start\")\n    time.sleep(float(params[\"sleep_time\"]))\n    # print(\"--------> Sleep stop\")\n    return\n\ndef loader(params):\n    global params_processed\n\n    if not params_processed:\n        default_params = {\n            \"cpu_stress\": {\"run\":False,\"range_complexity\": [100, 100], \"thread_pool_size\": 1, \"trials\": 1},\n            \"memory_stress\":{\"run\":False, \"memory_size\": 10000, \"memory_io\": 1000},\n            \"disk_stress\":{\"run\":False,\"tmp_file_name\":  \"mubtestfile.txt\", \"disk_write_block_count\": 1000, \"disk_write_block_size\": 1024},\n            \"sleep_stress\":{\"run\":False,\"sleep_time\": 0.01},\n            \"mean_bandwidth\": 11}\n\n        params = jsonmerge.merge(default_params,params)\n        params_processed = True\n        \n    if params['cpu_stress']['run']: \n        cpu_loader(params['cpu_stress'])\n    if params['memory_stress']['run']:\n        memory_loader(params['memory_stress'])\n    if params['disk_stress']['run']:\n        disk_loader(params['disk_stress'])\n    if params['sleep_stress']['run']:\n        sleep_loader(params['sleep_stress'])\n    return bandwidth_loader(params)\n\nif __name__ == '__main__':\n    default = {\n        \"cpu_stress\": {\"run\":True,\"range_complexity\": [100, 100], \"thread_pool_size\": 1, \"trials\": 10},\n        \"memory_stress\":{\"run\":True, \"memory_size\": 10000, \"memory_io\": 1000},\n        \"disk_stress\":{\"run\":True,\"tmp_file_name\":  \"mubtestfile.txt\", \"disk_write_block_count\": 1000, \"disk_write_block_size\": 1024},\n        \"sleep_stress\":{\"run\":False,\"sleep_time\": 0.01},\n        \"mean_bandwidth\": 100}\n    \n    loader(default)",
    "Colosseum.py": "import base64\n\n\ndef colosseum(args):\n    c = \"CiAgICAgICAgICAgICAgICAgICAgICAgIGAtK3NoTnktCiAgICAgICAgICAgICAgICAgICAgLSt5bU1NTU1OaHM6LmAgICAgICAgICAgICA\" \\\n        \"gIF9fXyAgIF9fX19fICAgXyAgIF8gICBfICBfX18gICBfICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAtK2hOTU1NTmhvLy8reW\" \\\n        \"ROTW0uICAgICAgICAgICAgL19cIFwgLyAvIF9ffCB8IHwgfCB8IHwgfC8gX198IC9fXCAgICAgICAgICAgICAgCiAgICAgICAgICAgICA6c\" \\\n        \"21NTU1OaG8vL3NkTk1NTU1NTU1kYCAgICAgICAgICAvIF8gXCBWIC98IF98ICB8IHxffCB8X3wgfCAoX18gLyBfIFwgICAgICAgICAgICAg\" \\\n        \"CiAgICAgICAgICAtc05NTU1kczovc21NTU1NTU1NTU1NTU1NeSAgICAgICAgIC9fLyBcX1xfLyB8X19ffCB8X19fX1xfX18vIFxfX18vXy8\" \\\n        \"gXF9cICAgICAgICAgICAgCiAgICAgICBgb21NTU1kKzoraE5NTU1NTU1NTU1NTU1NTU1NTW8gICAgICAgICAgIF9fXyAgX19fIF9fXyBfX1\" \\\n        \"8gICAgXyAgIF9fXyBfX18gX19fICAgX19fX18gX19fIAogICAgIGBvTk1NZG8tK2RNTU1kK3NNTU1NTU1NTU1NTU1NTU1OLy1gICAgICAgI\" \\\n        \"C8gXyBcfCBfIFwgX198IF8gXCAgL19cIHwgXyBcXyBffF8gX3wgfF8gICBffCBfX3wKICAgIDptTU55Oi9oTk1NTU1NcyAvTU1NTU1NTU1N\" \\\n        \"TU1NTU1NTU1NTm8gICAgIHwgKF8pIHwgIF8vIF98fCAgIC8gLyBfIFx8ICAgL3wgfCB8IHwgICAgfCB8IHwgX3wgCiAgICtNbW8tb05OTU1\" \\\n        \"NTU1NTWRkTk1NTU1NTU1NTW1kaHNvKy86OjotICAgICAgXF9fXy98X3wgfF9fX3xffF9cL18vIFxfXF98X1xfX198X19ffCAgIHxffCB8X1\" \\\n        \"9ffAogIC9tKy15Tk1vLU1NTU1NTU1NTU1NTmR5by86Oi8rb3NoZG1OTU1NZCAgICAgICAgICBfX18gICBfICAgXyAgIF8gICBfIF9fX19fI\" \\\n        \"F8gICBfICBfIF9fX19fICAgICAKICAtLWhNTU1NLS9NTU1NTU1OaG8vOi8reWROTU1NTU1NTU1NTU1NTWggICAgICAgICAvIF9ffCAvX1wg\" \\\n        \"fCB8IHwgfCB8IHxfICAgXy9fXCB8IFx8IHxfICAgX3wgICAgCiAgLm15eU1NTU5NTU1kcy86L3NkTk1NTU1NTU1NTU1NeTotK05NTU1oLSA\" \\\n        \"gICAgICAgXF9fIFwvIF8gXHwgfF98IHxffCB8IHwgfC8gXyBcfCAuYCB8IHwgfCAgICAgIAogLW1NL3NNTU1tcy86K2hOTU1NTU1NTU1Ob2\" \\\n        \"9kTU1NaCAgICA6TU1NTU5gICAgICAgIHxfX18vXy8gXF9cX19fX1xfX18vICB8Xy9fLyBcX1xffFxffCB8X3wgICAgICAKIGBOTW1NbXM6L\" \\\n        \"3lOTU1NTU1NZDo6ZE1NLiAgIGRNTXkgICAgOk1NTU1NeQogIGhNaC8veU5NTU1Nc2AtbU0tICA6TU1gICAgaE1NeSAgICA6TU1NTU1OOiAg\" \\\n        \"IGAKICArL3lOTU1tOi9OTS0gIHNNLSAgOk1NYCAgIGhNTWgtOi8rc01NTU1NTU5kZE5NaGAgICAgICAgICAgIGBtTk5ObW1tbWRkaGh5c3N\" \\\n        \"vKy86LS5gCiAtaE1NZDptbyAgc00tICB5TS0gIDpNTW9zaGROTU1NTU1NTU1NTU1NTU1NTU1NTU1vIGAuLi4uLi4tLS1zTU1NTU1NTU1NTU\" \\\n        \"1zLXlNTU1NTU1NTm1tZHlvOmAKOk1NTk1vIHlvICB5TS0gYGhNeWhtTk1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTW8gTk1NTU1NTU1NT\" \\\n        \"U1NTU1NTU1NTU1NTSsgc01NTU1NTU1tIC9NTU1NTm15Ky4KOk5tYG1vIHlvYC1oTU5OTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU5N\" \\\n        \"TU1NTW9gTk1NTU1NTU1NTU1NTU1NTU1NTU1NTU5tTk1NTnNvbU1OLStNTU1NZGBtTU1tcy0KIHNtIGhvOmROTk1NTU1NTU1NTU1NTU1NTU5\" \\\n        \"NTU1NTU55LytoTU1NTU4rYCAueU1NTW9gTk1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NbyAgL01NTU1NTU1NbSttTU1NTm15YAogb04vbU\" \\\n        \"1NTU1NTU1NTU1NTW1vc05NTW0tIGBoTU1NKyAgICBoTU1NKyAgICAgbU1NTi4raCsveU1NTU5zOi4tb05NTU1NTU1NTU1NTU1kbyt5TU1NT\" \\\n        \"U1NTU1NTU1oYGRoK00vCi5oTU1NTU1OeWhNTSsgLU5NLSAgK01NbyAgIC1NTU0vICAgIHNNTU0rICAgICBkTU1NbWAgICAgc01NKyAgICAg\" \\\n        \"L01NTU1NTU1tb3NOTU1kaE5NTU5OTU1NTU1NTXlgaE1OTToKZE1NTWQ6bSsgIGRNICAgZE0uICAvTU1vICAgOk1NTS8gICAgc01NTSsgICA\" \\\n        \"gIGRNTU1NaCAgICArTk46ICAgICAuTU1NTU1NTmAgIDpNcyAgOk1oICB5TSsueU1tc05NTU1NcwovTW9oKyB5LyAgaE0gICBkTS4gIC9NTW\" \\\n        \"8gICA6TU1NLyAgICBzTU1Nby4uLi4tbU1NTU1NeSsrKysrKysrKysrK3NNTU1NTU1tICAgLk0rICBgTSsgIC9tICAtTS0gL01vc01vCmBOL\" \\\n        \"isrIHkvICBoTWBgLm1NKy8veU1NZHN5eWRNTU1tbW1OTk1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU4gICAuTSsgIC5N\" \\\n        \"KyAgL20gIC1NLiA6TS4uTW8KYE4uK3M6ZGh5aE5NTk1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1\" \\\n        \"NTU1NTU1NTU1NTi0uLjpNb2BgLk1vICArbSAgLU0uIDpNLi5NbwpgTm1OTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU\" \\\n        \"1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1NTU1OTk5NbW1tTWhzeU0rL01vCnlNTU1NTU1NTU1NTU1NTU1NTk5NT\" \\\n        \"U1NTW1kbU1NTU1OaHloTk1NTU1OeW9veU5NTU1NTnMvLytoTU1NTU1OZG1OTU1NTU5tbU5NTU1NTU5OTU1NTU5NTU1NTU1NTU1NTU1NTW0K\" \\\n        \"Ok1NaE5oeU0vL05OLWB5TW0uIC5oTU1oICAgK01NTi0gICBgbU1NbS4gICAgLU1NTU06ICAgICBoTU1NKyAgIGBoTU1oYCAgYGhNTU4vIGB\" \\\n        \"5TU4tIDpNTS86bU1OL3lNTnNNaAouTW0gZG8uTiAgbWggIC1NZCAgIC9NTXMgICAuTU1tICAgICBoTU1kICAgICAgbU1NTS4gICAgIG9NTU\" \\\n        \"4gICAgIDpNTSsgICAgK01NbSAgIDpNaCAgIGRkICBzTWQgLU1oIE15Ci1NbSBoby5OICBkaCAgLk1kICAgL01NcyAgIGBNTU5gICAgIHlNT\" \\\n        \"WQgICAgICBkTU1NLiAgICAgb01NTiAgICAgLU1NKyAgICAvTU1tICAgLU1oICAgZGggIG9NZCAuTWggTXkKLU1tIGRvLU0gIGRkICBgTm0g\" \\\n        \"ICAvTU1zICAgYE1NTmAgICAgc01NZCAgICAgIGRNTU0uICAgICBvTU1OICAgICAtTU0rICAgICtNTW0gICAtTWggICBkZCAgb01kIC5NaCB\" \\\n        \"OcwpgLS0gLS5gLyAgOi8gICBvbyAgIC15aG8gICBgbW1OYCAgICB5TU1kICAgICAgZE1OTS4gICAgICttbW0gICAgIC1tbS8gICAgL2RkaC\" \\\n        \"AgIC1obyAgIG9vICA6by8gYDouCg==\"\n\n    base64_bytes = c.encode('ascii')\n    message_bytes = base64.b64decode(base64_bytes)\n    message = message_bytes.decode('ascii')\n    return message\n",
    "README.md": "# Description of Custom Internal Functions\n\n## Colosseum\n\nFunction that returns a simple asci art of Colosseum\n\n*Function name*: `colosseum`\n\n*Input Paramenters*: none\n\n## ComputePI\n\nThis *single-thread* internal function (included in the service-cell code) stresses the CPU by computing `D` decimal points of pi, where `D` is a random integer in `range_complexity` (e.g. 50,100). The return is a string whose length is a sample of an exp neg random variable with mean `mean_bandwidth` kBytes  \n\n*Function name*: `compute_pi`\n\n*Default Input Paramenters*:\n\n```json\n{\n    \"range_complexity\": [50, 100], \n    \"mean_bandwidth\": 10\n}\n```\n\n## Loader\n\nThis *multi-thread* internal function sequentially load the CPU, the memory, the disk and then sleep for a bit. Finally, it returns a string whose length is a sample of an exp neg random variable with mean `mean_bandwidth` kBytes.\n\nThe CPU stress is performed (if `run`=true) by running `thread_pool_size` parallel jobs. Each job computes `D` decimal points of pi, where `D` is a random integer in `range_complexity` (e.g. 50,100). The computation is repeated sequentially `trials` times per job.\n\nThe memory stress is performed (if `run`=true) by allocating `memory_size` kBytes. Then `memory_io` read/write operations of 1 byte are executed sequentially.\n\nThe disk stress is performed by creating the file `tmp_file_name`. Writing `disk_write_block_count` blocks of  `disk_write_block_size` bytes. Finally, random accessing each of them once.\n\nThe sleep stress is performed (if `run`=true) by sleeping for `sleep_time` seconds.\n\n*Function name*: `loader`\n\n*Default Input Paramenters*:\n\n```json\n{\n        \"cpu_stress\": {\n            \"run\":false,\n            \"range_complexity\": [100, 100], \"thread_pool_size\": 1, \n            \"trials\": 1\n        },\n        \"memory_stress\":{\n            \"run\":false, \n            \"memory_size\": 10000, \"memory_io\": 1000\n        },\n        \"disk_stress\":{\n            \"run\":false,\n            \"tmp_file_name\":  \"mubtestfile.txt\", \n            \"disk_write_block_count\": 1000, \"disk_write_block_size\": 1024\n        },\n        \"sleep_stress\":{\n            \"run\":true,\n            \"sleep_time\":  0.01\n        }\n        \"mean_bandwidth\": 11}\n```"
  }
kind: ConfigMap
metadata:
  name: internal-services
  namespace: default
